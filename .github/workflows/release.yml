name: Publish Cosmere Mods to GitHub

on:
  push:
    tags:
      - '*'
    branches:
      - 'main'
      - 'beta'
      - 'alpha'

permissions:
  contents: write # to be able to publish a GitHub release
  issues: write # to be able to comment on released issues
  pull-requests: write # to be able to comment on released pull requests
  id-token: write # to enable use of OIDC for npm provenance

jobs:
  get-mods:
    runs-on: ubuntu-latest
    outputs:
      mods: ${{ steps.set-mods.outputs.mods }}
    steps:
      - name: Validate Git tag format
        if: github.ref_type == 'tag'
        run: |
          TAG="${{ github.ref_name }}"
          VERSION=${TAG#v}  # strip leading 'v' if present

          echo "Checking tag format: $VERSION"

          if [[ ! "$VERSION" =~ ^[0-9]+\.[0-9]+\.[0-9]+(\.[0-9]+)?(-alpha|-beta)?$ ]]; then
            echo "❌ Invalid tag format: '$VERSION'"
            echo "Expected: MAJOR.MINOR.PATCH[.REVISION][-alpha|-beta]"
            exit 1
          fi

          echo "✅ Tag format valid."

      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Determine changed Cosmere mods
        id: set-mods
        run: |
          mods=$(find . -maxdepth 1 -type d -name "Cosmere*" -exec basename {} \; | jq -R -s -c 'split("\n") | map(select(length > 0))')
          echo "mods=$mods" >> "$GITHUB_OUTPUT"

  prepare:
    needs: get-mods
    runs-on: ubuntu-latest
    strategy:
      matrix:
        mod: ${{ fromJson(needs.get-mods.outputs.mods) }}
    
    env:
      BRANCH_NAME: ${{ github.head_ref || github.ref_name }}
      MOD: ${{ matrix.mod }}
      TEMP_DIR: "/tmp/${{ matrix.mod }}_upload"
      STEAM_USERNAME: ${{ secrets.STEAM_USERNAME }}
      STEAM_PASSWORD: ${{ secrets.STEAM_PASSWORD }}
      #STEAM_TFA_SEED: ${{ secrets.STEAM_TFA_SEED }}

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup Dotnet
        uses: actions/setup-dotnet@v2
        with:
          dotnet-version: 9.0.x

      - name: Set up Node
        uses: actions/setup-node@v4
        with:
          node-version: "lts/*"

      - name: Install steamdown + steam-totp
        run: |
          npm install -g @steamdown/cli tsx
          cd .scripts && npm i
      - name: Run generators
        run: npm --prefix .scripts start -- -d -f

      - name: Install Mod Dependencies
        run: dotnet restore $MOD/$MOD

      - name: Set build configuration
        run: |
          if [[ "${{ github.ref_type }}" == "tag" && "${{ github.ref_name }}" == "main" ]]; then
            echo "BUILD=Release" >> $GITHUB_ENV
          else
            echo "BUILD=Debug" >> $GITHUB_ENV
          fi

      - name: Build Mod
        if: ${{ github.ref_type == 'tag' }}
        run: |
          TAG="${{ github.ref_name }}"          # e.g. v1.6.0-beta or 1.6.0.1
          VERSION="${TAG#v}"                    # strip leading 'v'

          # Extract components with known-good format
          REGEX='^([0-9]+)\.([0-9]+)\.([0-9]+)(-alpha|-beta)?(\.[0-9]+)?$'
          [[ "$VERSION" =~ $REGEX ]]

          MAJOR="${BASH_REMATCH[1]}"
          MINOR="${BASH_REMATCH[2]}"
          PATCH="${BASH_REMATCH[3]}"
          LABEL="${BASH_REMATCH[4]#-}"         # optional, strip leading dash
          REVISION="${BASH_REMATCH[5]#.}"      # optional, strip leading dot
          [[ -z "$REVISION" ]] && REVISION="0" # default REVISION to `0`

          CONFIG="Debug"
          [[ -z "$LABEL" && "${GITHUB_REF_NAME}" == "main" ]] && CONFIG="Release"

          BUILD_VERSION="$MAJOR.$MINOR.$PATCH"
          [[ -n "$REVISION" ]] && BUILD_VERSION+=".$REVISION"
          [[ -n "$LABEL" ]] && BUILD_VERSION+="-${LABEL}"

          echo "Running script generation"

          echo "Building $MOD@$BUILD_VERSION ($CONFIG)"

          dotnet build $MOD/$MOD \
            --configuration "$CONFIG" \
            -p:Version="$BUILD_VERSION" \
            -p:FileVersion="$BUILD_VERSION" \
            -p:AssemblyVersion="$MAJOR.$MINOR.$PATCH.0" \
            -p:InformationalVersion="$BUILD_VERSION" \
            --no-restore

      - name: Build Mod
        if: ${{ github.ref_type != 'tag' }}
        run: dotnet build $MOD/$MOD --configuration Debug --no-restore

      - name: Prepare upload directory
        id: prepare
        run: |
          FILE_ID=$(cat "$MOD/About/PublishedFileId.txt")
          DESCRIPTION_FILE="$TEMP_DIR/steam_description.txt"

          mkdir -p "$TEMP_DIR"

          echo "📄 Generating description..."
          cat .github/README.header.md "$MOD/README.md" .github/README.footer.md | steamdown > "$DESCRIPTION_FILE"

          echo "🚫 Respecting .steamignore..."
          if [ -f "$MOD/.steamignore" ]; then
            rsync -av --exclude-from="$MOD/.steamignore" --exclude=".steamignore" "$MOD/" "$TEMP_DIR"
          else
            rsync -av "$MOD/" "$TEMP_DIR"
          fi

          CHANGE_NOTE=$(git log -1 --pretty=%B | sed 's/"/\\"/g')
          ESCAPED_DESCRIPTION=$(sed 's/"/\\"/g' "$DESCRIPTION_FILE")

          {
            echo '"workshopitem"'
            echo '{'
            echo '  "appid" "294100"'
            echo "  \"publishedfileid\" \"$FILE_ID\""
            echo "  \"contentfolder\" \"$TEMP_DIR\""
            echo "  \"changenote\" \"$CHANGE_NOTE\""
            echo "  \"description\" \"$ESCAPED_DESCRIPTION\""
            echo '}'
          } > "$TEMP_DIR/workshop.vdf"

          echo "✅ Generated workshop.vdf:"
          cat "$TEMP_DIR/workshop.vdf"
          
          ZIP_PATH="${{ github.workspace }}/${MOD}-${BRANCH_NAME}.zip"
          cd "$TEMP_DIR"
          zip -r "$ZIP_PATH" .
          
          echo "vdfpath=$TEMP_DIR/workshop.vdf" >> "$GITHUB_OUTPUT"

      - name: Upload with SteamCMD
        if: ${{ github.ref_type == 'tag' && !endsWith(github.ref_name, '-beta') && !endsWith(github.ref_name, '-alpha') }}
        run: |
          sudo apt update
          sudo apt install -y lib32gcc-s1
          mkdir -p ~/steamcmd
          curl -sqL "https://steamcdn-a.akamaihd.net/client/installer/steamcmd_linux.tar.gz" | tar zxvf - -C ~/steamcmd
          ~/steamcmd/steamcmd.sh +login "$STEAM_USERNAME" "$STEAM_PASSWORD" +workshop_build_item "${{ steps.prepare.outputs.vdfpath }}" +quit

      - name: Upload zip artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.mod }}-zip
          path: ${{ github.workspace }}/${{ matrix.mod }}-${{ env.BRANCH_NAME }}.zip
  semantic-release:
    needs: prepare
    if: github.ref_type != 'tag'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Set up Node
        uses: actions/setup-node@v4
        with:
          node-version: "lts/*"
      - name: Release
        if: ${{ github.ref_type == 'branch' }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          npm install @semantic-release/git semantic-release-replace-plugin -D
          npx semantic-release
  publish:
    needs: prepare
    if: github.ref_type == 'tag'
    runs-on: ubuntu-latest
    env:
      BRANCH_NAME: ${{ github.head_ref || github.ref_name }}

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Download all zip artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: '*-zip'
          path: ./zips
          merge-multiple: true

      - name: List all zip files
        run: |
          echo "Zips downloaded:"
          find ./zips -name "*.zip"

      - name: Get latest commit message
        id: commit
        run: |
          BODY=$(git log -1 --pretty=%B | sed 's/"/\\"/g')
          echo "body=$BODY" >> "$GITHUB_OUTPUT"

      - name: Create GitHub release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.ref_name }}
          name: "Cosmere Mods Release - ${{ github.ref_name }}"
          body: ${{ steps.commit.outputs.body }}
          files: ./zips/**/*.zip
          prerelease: ${{ contains(github.ref_name, '-beta') || contains(github.ref_name, '-alpha') }}
          make_latest: ${{ !(contains(github.ref_name, '-beta') || contains(github.ref_name, '-alpha')) }}
